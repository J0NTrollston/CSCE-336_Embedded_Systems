
code.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  000004da  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000530  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f13  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000854  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b1  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800104 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 rand.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000022e l     F .text	00000092 do_rand
00800100 l     O .data	00000004 next
00000000 l    df *ABS*	00000000 _clear_bss.o
00000094 l       .text	00000000 .do_clear_bss_start
00000092 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800111 l     O .bss	00000004 timer0_millis
00800110 l     O .bss	00000001 timer0_fract
0080010c l     O .bss	00000004 timer0_overflow_count
00800108 l     O .bss	00000004 result_8
00800104 l     O .bss	00000004 result_16
00000000 l    df *ABS*	00000000 _divmodsi4.o
00000304 l       .text	00000000 __divmodsi4_neg2
00000312 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00000370 l       .text	00000000 __udivmodsi4_ep
00000356 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _udivmodqi4.o
00000434 l       .text	00000000 __udivmodqi4_ep
0000042c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _exit.o
00000440 l       .text	00000000 __stop_program
000000a2  w      .text	00000000 __vector_22
0000038e g       .text	0000001e .hidden __umulhisi3
000000a2  w      .text	00000000 __vector_1
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
00000068 g       .text	00000000 __trampolines_start
00000442 g       .text	00000000 _etext
000000a2  w      .text	00000000 __vector_24
000000a2  w      .text	00000000 __vector_12
000000a2 g       .text	00000000 __bad_interrupt
00000446 g       *ABS*	00000000 __data_load_end
000000a2  w      .text	00000000 __vector_6
00000068 g       .text	00000000 __trampolines_end
000000a2  w      .text	00000000 __vector_3
000000a2  w      .text	00000000 __vector_23
00000442 g       *ABS*	00000000 __data_load_start
00000068 g       .text	00000000 __dtors_end
00800115 g       .bss	00000000 __bss_end
00000324 g       .text	00000016 .hidden __muluhisi3
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_25
000000a2  w      .text	00000000 __vector_11
00000068  w      .text	00000000 __init
00000000  w      *UND*	00000000 _Z14serialEventRunv
000000a2  w      .text	00000000 __vector_13
000002c0 g     F .text	00000006 rand_r
000000a2  w      .text	00000000 __vector_17
000000a2  w      .text	00000000 __vector_19
000000a2  w      .text	00000000 __vector_7
0000008a g       .text	00000010 .hidden __do_clear_bss
00810000 g       .comment	00000000 __eeprom_end
000002c6 g     F .text	0000000a rand
000003b0 g       .text	00000000 __floatsisf
00000000 g       .text	00000000 __vectors
00800104 g       .data	00000000 __data_end
00000000  w      .text	00000000 __vector_default
000000a2  w      .text	00000000 __vector_5
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00000068 g       .text	00000000 __ctors_start
00000074 g       .text	00000016 .hidden __do_copy_data
00800104 g       .bss	00000000 __bss_start
0000013a g     F .text	000000f4 main
000002d0 g     F .text	00000016 srand
000000a2  w      .text	00000000 __vector_4
00800060 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
00000314 g       .text	00000010 .hidden __negsi2
00000000  w      *ABS*	00000000 __heap_end
000000a2  w      .text	00000000 __vector_9
000000a2  w      .text	00000000 __vector_2
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_21
000000a2  w      .text	00000000 __vector_15
00000426 g       .text	00000018 .hidden __udivmodqi4
00000340 g       .text	0000000a .hidden __mulohisi3
00000068 g       .text	00000000 __dtors_start
00000068 g       .text	00000000 __ctors_end
000002e6 g       .text	0000002e .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
00800104 g       .data	00000000 _edata
00800115 g       .comment	00000000 _end
000000a2  w      .text	00000000 __vector_8
0000043e  w      .text	00000000 .hidden exit
000003ac g     F .text	0000007a __floatunsisf
0000034a g       .text	00000044 .hidden __udivmodsi4
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0000043e g       .text	00000000 .hidden _exit
000000a2  w      .text	00000000 __vector_14
000000a2  w      .text	00000000 __vector_10
000000a6 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
000000a2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_20
0000033a g       .text	00000006 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer0_millis>
  c0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer0_millis+0x1>
  c4:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer0_millis+0x2>
  c8:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
  cc:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
  d4:	2d 37       	cpi	r18, 0x7D	; 125
  d6:	58 f5       	brcc	.+86     	; 0x12e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
  de:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <timer0_fract>
	timer0_millis = m;
  e2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer0_millis>
  e6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <timer0_millis+0x1>
  ea:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <timer0_millis+0x2>
  ee:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <timer0_millis+0x3>
	timer0_overflow_count++;
  f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer0_overflow_count>
  f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer0_overflow_count+0x1>
  fa:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer0_overflow_count+0x2>
  fe:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer0_overflow_count+0x3>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer0_overflow_count>
 10c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer0_overflow_count+0x1>
 110:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer0_overflow_count+0x2>
 114:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer0_overflow_count+0x3>
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 12e:	26 e8       	ldi	r18, 0x86	; 134
 130:	23 0f       	add	r18, r19
		m += 1;
 132:	02 96       	adiw	r24, 0x02	; 2
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	d2 cf       	rjmp	.-92     	; 0xde <__vector_16+0x38>

0000013a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 13a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 13c:	84 b5       	in	r24, 0x24	; 36
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	81 60       	ori	r24, 0x01	; 1
 146:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 154:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 15e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 162:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 16c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 176:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 180:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 18a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 1a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
void loop(){

  uint8_t a,b;
  uint16_t aa,bb;

  a = (double) (rand() & 0xFFFF);
 1c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <rand>
 1c8:	c8 2f       	mov	r28, r24
  b = (double) (rand() & 0xFFFF);
 1ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <rand>
 1ce:	68 2f       	mov	r22, r24
  asm volatile("nop");
 1d0:	00 00       	nop
  result_8 = a/b;
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
 1d8:	68 2f       	mov	r22, r24
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__floatsisf>
 1e4:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <result_8>
 1e8:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <result_8+0x1>
 1ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <result_8+0x2>
 1f0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <result_8+0x3>
  asm volatile("nop");
 1f4:	00 00       	nop

  aa = (double) (rand() & 0xFFFF);
 1f6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <rand>
 1fa:	ec 01       	movw	r28, r24
  bb = (double) (rand() & 0xFFFF);
 1fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <rand>
  asm volatile("nop");
 200:	00 00       	nop
  result_16 = aa-bb;
 202:	c8 1b       	sub	r28, r24
 204:	d9 0b       	sbc	r29, r25
 206:	be 01       	movw	r22, r28
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__floatunsisf>
 210:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 214:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 218:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 21c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  asm volatile("nop");
 220:	00 00       	nop
 222:	01 15       	cp	r16, r1
 224:	11 05       	cpc	r17, r1
 226:	71 f2       	breq	.-100    	; 0x1c4 <main+0x8a>
 228:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 22c:	cb cf       	rjmp	.-106    	; 0x1c4 <main+0x8a>

0000022e <do_rand>:
 22e:	8f 92       	push	r8
 230:	9f 92       	push	r9
 232:	af 92       	push	r10
 234:	bf 92       	push	r11
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	68 81       	ld	r22, Y
 246:	79 81       	ldd	r23, Y+1	; 0x01
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	9b 81       	ldd	r25, Y+3	; 0x03
 24c:	61 15       	cp	r22, r1
 24e:	71 05       	cpc	r23, r1
 250:	81 05       	cpc	r24, r1
 252:	91 05       	cpc	r25, r1
 254:	21 f4       	brne	.+8      	; 0x25e <do_rand+0x30>
 256:	64 e2       	ldi	r22, 0x24	; 36
 258:	79 ed       	ldi	r23, 0xD9	; 217
 25a:	8b e5       	ldi	r24, 0x5B	; 91
 25c:	97 e0       	ldi	r25, 0x07	; 7
 25e:	2d e1       	ldi	r18, 0x1D	; 29
 260:	33 ef       	ldi	r19, 0xF3	; 243
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__divmodsi4>
 26a:	49 01       	movw	r8, r18
 26c:	5a 01       	movw	r10, r20
 26e:	9b 01       	movw	r18, r22
 270:	ac 01       	movw	r20, r24
 272:	a7 ea       	ldi	r26, 0xA7	; 167
 274:	b1 e4       	ldi	r27, 0x41	; 65
 276:	0e 94 92 01 	call	0x324	; 0x324 <__muluhisi3>
 27a:	6b 01       	movw	r12, r22
 27c:	7c 01       	movw	r14, r24
 27e:	ac ee       	ldi	r26, 0xEC	; 236
 280:	b4 ef       	ldi	r27, 0xF4	; 244
 282:	a5 01       	movw	r20, r10
 284:	94 01       	movw	r18, r8
 286:	0e 94 a0 01 	call	0x340	; 0x340 <__mulohisi3>
 28a:	dc 01       	movw	r26, r24
 28c:	cb 01       	movw	r24, r22
 28e:	8c 0d       	add	r24, r12
 290:	9d 1d       	adc	r25, r13
 292:	ae 1d       	adc	r26, r14
 294:	bf 1d       	adc	r27, r15
 296:	b7 ff       	sbrs	r27, 7
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <do_rand+0x72>
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	a1 09       	sbc	r26, r1
 29e:	b0 48       	sbci	r27, 0x80	; 128
 2a0:	88 83       	st	Y, r24
 2a2:	99 83       	std	Y+1, r25	; 0x01
 2a4:	aa 83       	std	Y+2, r26	; 0x02
 2a6:	bb 83       	std	Y+3, r27	; 0x03
 2a8:	9f 77       	andi	r25, 0x7F	; 127
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	af 90       	pop	r10
 2ba:	9f 90       	pop	r9
 2bc:	8f 90       	pop	r8
 2be:	08 95       	ret

000002c0 <rand_r>:
 2c0:	0e 94 17 01 	call	0x22e	; 0x22e <do_rand>
 2c4:	08 95       	ret

000002c6 <rand>:
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 17 01 	call	0x22e	; 0x22e <do_rand>
 2ce:	08 95       	ret

000002d0 <srand>:
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	a0 e0       	ldi	r26, 0x00	; 0
 2d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2dc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2e0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2e4:	08 95       	ret

000002e6 <__divmodsi4>:
 2e6:	05 2e       	mov	r0, r21
 2e8:	97 fb       	bst	r25, 7
 2ea:	1e f4       	brtc	.+6      	; 0x2f2 <__divmodsi4+0xc>
 2ec:	00 94       	com	r0
 2ee:	0e 94 8a 01 	call	0x314	; 0x314 <__negsi2>
 2f2:	57 fd       	sbrc	r21, 7
 2f4:	07 d0       	rcall	.+14     	; 0x304 <__divmodsi4_neg2>
 2f6:	0e 94 a5 01 	call	0x34a	; 0x34a <__udivmodsi4>
 2fa:	07 fc       	sbrc	r0, 7
 2fc:	03 d0       	rcall	.+6      	; 0x304 <__divmodsi4_neg2>
 2fe:	4e f4       	brtc	.+18     	; 0x312 <__divmodsi4_exit>
 300:	0c 94 8a 01 	jmp	0x314	; 0x314 <__negsi2>

00000304 <__divmodsi4_neg2>:
 304:	50 95       	com	r21
 306:	40 95       	com	r20
 308:	30 95       	com	r19
 30a:	21 95       	neg	r18
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	4f 4f       	sbci	r20, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255

00000312 <__divmodsi4_exit>:
 312:	08 95       	ret

00000314 <__negsi2>:
 314:	90 95       	com	r25
 316:	80 95       	com	r24
 318:	70 95       	com	r23
 31a:	61 95       	neg	r22
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	08 95       	ret

00000324 <__muluhisi3>:
 324:	0e 94 c7 01 	call	0x38e	; 0x38e <__umulhisi3>
 328:	a5 9f       	mul	r26, r21
 32a:	90 0d       	add	r25, r0
 32c:	b4 9f       	mul	r27, r20
 32e:	90 0d       	add	r25, r0
 330:	a4 9f       	mul	r26, r20
 332:	80 0d       	add	r24, r0
 334:	91 1d       	adc	r25, r1
 336:	11 24       	eor	r1, r1
 338:	08 95       	ret

0000033a <__mulshisi3>:
 33a:	b7 ff       	sbrs	r27, 7
 33c:	0c 94 92 01 	jmp	0x324	; 0x324 <__muluhisi3>

00000340 <__mulohisi3>:
 340:	0e 94 92 01 	call	0x324	; 0x324 <__muluhisi3>
 344:	82 1b       	sub	r24, r18
 346:	93 0b       	sbc	r25, r19
 348:	08 95       	ret

0000034a <__udivmodsi4>:
 34a:	a1 e2       	ldi	r26, 0x21	; 33
 34c:	1a 2e       	mov	r1, r26
 34e:	aa 1b       	sub	r26, r26
 350:	bb 1b       	sub	r27, r27
 352:	fd 01       	movw	r30, r26
 354:	0d c0       	rjmp	.+26     	; 0x370 <__udivmodsi4_ep>

00000356 <__udivmodsi4_loop>:
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	ee 1f       	adc	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	a2 17       	cp	r26, r18
 360:	b3 07       	cpc	r27, r19
 362:	e4 07       	cpc	r30, r20
 364:	f5 07       	cpc	r31, r21
 366:	20 f0       	brcs	.+8      	; 0x370 <__udivmodsi4_ep>
 368:	a2 1b       	sub	r26, r18
 36a:	b3 0b       	sbc	r27, r19
 36c:	e4 0b       	sbc	r30, r20
 36e:	f5 0b       	sbc	r31, r21

00000370 <__udivmodsi4_ep>:
 370:	66 1f       	adc	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	1a 94       	dec	r1
 37a:	69 f7       	brne	.-38     	; 0x356 <__udivmodsi4_loop>
 37c:	60 95       	com	r22
 37e:	70 95       	com	r23
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	bd 01       	movw	r22, r26
 38a:	cf 01       	movw	r24, r30
 38c:	08 95       	ret

0000038e <__umulhisi3>:
 38e:	a2 9f       	mul	r26, r18
 390:	b0 01       	movw	r22, r0
 392:	b3 9f       	mul	r27, r19
 394:	c0 01       	movw	r24, r0
 396:	a3 9f       	mul	r26, r19
 398:	70 0d       	add	r23, r0
 39a:	81 1d       	adc	r24, r1
 39c:	11 24       	eor	r1, r1
 39e:	91 1d       	adc	r25, r1
 3a0:	b2 9f       	mul	r27, r18
 3a2:	70 0d       	add	r23, r0
 3a4:	81 1d       	adc	r24, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	91 1d       	adc	r25, r1
 3aa:	08 95       	ret

000003ac <__floatunsisf>:
 3ac:	e8 94       	clt
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <__floatsisf+0x12>

000003b0 <__floatsisf>:
 3b0:	97 fb       	bst	r25, 7
 3b2:	3e f4       	brtc	.+14     	; 0x3c2 <__floatsisf+0x12>
 3b4:	90 95       	com	r25
 3b6:	80 95       	com	r24
 3b8:	70 95       	com	r23
 3ba:	61 95       	neg	r22
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	8f 4f       	sbci	r24, 0xFF	; 255
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	99 23       	and	r25, r25
 3c4:	a9 f0       	breq	.+42     	; 0x3f0 <__floatsisf+0x40>
 3c6:	f9 2f       	mov	r31, r25
 3c8:	96 e9       	ldi	r25, 0x96	; 150
 3ca:	bb 27       	eor	r27, r27
 3cc:	93 95       	inc	r25
 3ce:	f6 95       	lsr	r31
 3d0:	87 95       	ror	r24
 3d2:	77 95       	ror	r23
 3d4:	67 95       	ror	r22
 3d6:	b7 95       	ror	r27
 3d8:	f1 11       	cpse	r31, r1
 3da:	f8 cf       	rjmp	.-16     	; 0x3cc <__floatsisf+0x1c>
 3dc:	fa f4       	brpl	.+62     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3de:	bb 0f       	add	r27, r27
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <__floatsisf+0x36>
 3e2:	60 ff       	sbrs	r22, 0
 3e4:	1b c0       	rjmp	.+54     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	16 c0       	rjmp	.+44     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3f0:	88 23       	and	r24, r24
 3f2:	11 f0       	breq	.+4      	; 0x3f8 <__floatsisf+0x48>
 3f4:	96 e9       	ldi	r25, 0x96	; 150
 3f6:	11 c0       	rjmp	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f8:	77 23       	and	r23, r23
 3fa:	21 f0       	breq	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	9e e8       	ldi	r25, 0x8E	; 142
 3fe:	87 2f       	mov	r24, r23
 400:	76 2f       	mov	r23, r22
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	66 23       	and	r22, r22
 406:	71 f0       	breq	.+28     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 408:	96 e8       	ldi	r25, 0x86	; 134
 40a:	86 2f       	mov	r24, r22
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	2a f0       	brmi	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 412:	9a 95       	dec	r25
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	da f7       	brpl	.-10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41c:	88 0f       	add	r24, r24
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	97 f9       	bld	r25, 7
 424:	08 95       	ret

00000426 <__udivmodqi4>:
 426:	99 1b       	sub	r25, r25
 428:	79 e0       	ldi	r23, 0x09	; 9
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__udivmodqi4_ep>

0000042c <__udivmodqi4_loop>:
 42c:	99 1f       	adc	r25, r25
 42e:	96 17       	cp	r25, r22
 430:	08 f0       	brcs	.+2      	; 0x434 <__udivmodqi4_ep>
 432:	96 1b       	sub	r25, r22

00000434 <__udivmodqi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	7a 95       	dec	r23
 438:	c9 f7       	brne	.-14     	; 0x42c <__udivmodqi4_loop>
 43a:	80 95       	com	r24
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
